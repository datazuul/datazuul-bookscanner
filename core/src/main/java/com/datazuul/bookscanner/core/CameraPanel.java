package com.datazuul.bookscanner.core;

import chdk.ptp.java.ICamera;
import chdk.ptp.java.exception.CameraConnectionException;
import chdk.ptp.java.exception.GenericCameraException;
import chdk.ptp.java.exception.PTPTimeoutException;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.swing.SpinnerListModel;
import javax.usb.UsbDisconnectedException;
import javax.usb.UsbException;
import org.openide.util.Exceptions;

public class CameraPanel extends javax.swing.JPanel {

  private boolean zoomSliderInitialized;
  private final SpinnerListModel rotationModel = new SpinnerListModel(Arrays.asList(new Integer[]{-270, -180, -90, 0, 90, 180, 270}));

  /**
   * Creates new form CameraPanel
   */
  public CameraPanel() {
    initComponents();
  }

  public void setCameraName(String cameraName) {
    this.cameraName.setText(cameraName);
  }

  protected int getRotationDegrees() {
    return (int) rotationModel.getValue();
  }
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cameraName = new javax.swing.JLabel();
    zoomSlider = new javax.swing.JSlider();
    zoomLabel = new javax.swing.JLabel();
    rotationSpinner = new javax.swing.JSpinner();
    rotationLabel = new javax.swing.JLabel();

    cameraName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    cameraName.setText("- no camera selected -");

    zoomSlider.setMajorTickSpacing(1);
    zoomSlider.setMaximum(10);
    zoomSlider.setMinorTickSpacing(1);
    zoomSlider.setPaintLabels(true);
    zoomSlider.setPaintTicks(true);
    zoomSlider.setSnapToTicks(true);
    zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        zoomSliderStateChanged(evt);
      }
    });

    zoomLabel.setText("Zoom:");

    rotationSpinner.setModel(rotationModel);
    rotationSpinner.setValue(0);
    rotationSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        rotationSpinnerStateChanged(evt);
      }
    });

    rotationLabel.setLabelFor(rotationSpinner);
    rotationLabel.setText("Rotation:");
    rotationLabel.setToolTipText("degrees each taken image should be rotated");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(cameraName)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rotationLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(rotationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(zoomLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(zoomSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(13, 13, 13)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cameraName)
          .addComponent(rotationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(rotationLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(zoomLabel)
          .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
    int zoom = zoomSlider.getValue();
    try {
      if (zoomSliderInitialized) {
        if (zoom != camera.getZoom()) {
          ScanPanel scanPanel = (ScanPanel) getParent();
          scanPanel.stopLiveView();
          camera.setZoom(zoom);
          scanPanel.startLiveView();
        }
      }
    } catch (PTPTimeoutException | GenericCameraException ex) {
      Exceptions.printStackTrace(ex);
    }
  }//GEN-LAST:event_zoomSliderStateChanged

  private void rotationSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSpinnerStateChanged
    Integer rotationDegrees = (Integer) rotationModel.getValue();
//    Integer rotationDegrees = (Integer) rotationSpinner.getValue();
    if (rotationModel.getPreviousValue() != rotationDegrees) {
      System.out.println(rotationDegrees);
    }
  }//GEN-LAST:event_rotationSpinnerStateChanged


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel cameraName;
  private javax.swing.JLabel rotationLabel;
  private javax.swing.JSpinner rotationSpinner;
  private javax.swing.JLabel zoomLabel;
  private javax.swing.JSlider zoomSlider;
  // End of variables declaration//GEN-END:variables

  private ICamera camera;

  public ICamera getCamera() {
    return camera;
  }

  public void setCamera(ICamera camera) {
    this.camera = camera;

    // connect camera
    if (!this.camera.isConnected()) {
      try {
        this.camera.connect();
      } catch (CameraConnectionException ex) {
        Exceptions.printStackTrace(ex);
      }
    }

    // set camera name
    try {
      String cameraDescription = getCameraDescription(this.camera);
      setCameraName(cameraDescription);
    } catch (UnsupportedEncodingException | UsbException | UsbDisconnectedException ex) {
      Exceptions.printStackTrace(ex);
    }

    // init zoom slider
    try {
      zoomSliderInitialized = false;
      zoomSlider.setMinimum(0);
      zoomSlider.setMinorTickSpacing(1);
      zoomSlider.setMaximum(this.camera.getZoomSteps());
      zoomSlider.setPaintLabels(true);
      zoomSlider.setValue(this.camera.getZoom());
      zoomSliderInitialized = true;
    } catch (PTPTimeoutException | GenericCameraException ex) {
      Exceptions.printStackTrace(ex);
    }
  }

  private String getCameraDescription(ICamera camera) throws UnsupportedEncodingException, UsbException, UsbDisconnectedException {
    byte portNumber = camera.getUsbDevice().getParentUsbPort().getPortNumber();
    StringBuilder sbCameraName = new StringBuilder();
    sbCameraName.append(camera.getUsbDevice().getProductString());
    sbCameraName.append(" ").append(camera.getCameraInfo().name());
    sbCameraName.append(" - Serial-Nr.: ").append(camera.getUsbDevice().getSerialNumberString());
    sbCameraName.append(" - Port: ").append(portNumber);
    return sbCameraName.toString();
  }
}
